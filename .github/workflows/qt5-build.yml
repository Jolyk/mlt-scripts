name: docker-qt5-build

on:
  push:
    # Publish `$default-branch` as Docker `latest` image.
    branches:
      - $default-branch

    # Publish `v1.2.3` tags as releases.
    # tags:
    #   - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: mltframework/qt:5.15.1-ubuntu18.04

jobs:
  build:
    # See also https://docs.docker.com/docker-hub/builds/
    runs-on: ubuntu-latest
    # if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build --tag $IMAGE_NAME docker/qt5-build

      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: mltframework/qt
        #   tag_with_ref: true


    #   - name: Log into GitHub Container Registry
    #   # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
    #     run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    #   - name: Push image to GitHub Container Registry
    #     run: |
    #       IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
    #       # Change all uppercase to lowercase
    #       IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
    #       # Strip git ref prefix from version
    #       VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
    #       # Strip "v" prefix from tag name
    #       [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
    #       # Use Docker `latest` tag convention
    #       [ "$VERSION" == "$default-branch" ] && VERSION=latest
    #       echo IMAGE_ID=$IMAGE_ID
    #       echo VERSION=$VERSION
    #       docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
    #       docker push $IMAGE_ID:$VERSION
